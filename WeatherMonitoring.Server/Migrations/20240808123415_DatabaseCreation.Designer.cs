// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WeatherMonitoring.Repository;

#nullable disable

namespace WeatherMonitoring.Server.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240808123415_DatabaseCreation")]
    partial class DatabaseCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WeatherMonitoring.Entities.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("LocationId");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Country")
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)")
                        .HasColumnName("country");

                    b.Property<bool>("Included")
                        .HasColumnType("boolean")
                        .HasColumnName("included");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)")
                        .HasColumnName("name");

                    b.Property<string>("Region")
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)")
                        .HasColumnName("region");

                    b.Property<string>("TzId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tzId");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WeatherMonitoring.Entities.Models.Weather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("WeatherId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConditionCode")
                        .HasColumnType("integer")
                        .HasColumnName("ccode");

                    b.Property<string>("ConditionText")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("ctext");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer")
                        .HasColumnName("humidity");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastup");

                    b.Property<long>("LastUpdatedEpoch")
                        .HasColumnType("bigint")
                        .HasColumnName("lastup_epoch");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<double>("PressureIn")
                        .HasColumnType("double precision")
                        .HasColumnName("pressure_in");

                    b.Property<double>("TemperatureCelsius")
                        .HasColumnType("double precision")
                        .HasColumnName("temp_c");

                    b.Property<double>("WindSpeedKph")
                        .HasColumnType("double precision")
                        .HasColumnName("wind_kph");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Weathers");
                });

            modelBuilder.Entity("WeatherMonitoring.Entities.Models.Weather", b =>
                {
                    b.HasOne("WeatherMonitoring.Entities.Models.Location", "Location")
                        .WithMany("Weathers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("WeatherMonitoring.Entities.Models.Location", b =>
                {
                    b.Navigation("Weathers");
                });
#pragma warning restore 612, 618
        }
    }
}
